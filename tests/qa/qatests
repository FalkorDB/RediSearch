#!/usr/bin/env python3

import sys
import os
import click
import re
import json
import requests
import urllib3

HERE = os.path.dirname(__file__)
ROOT = os.path.abspath(os.path.join(HERE, "../.."))
READIES = os.path.abspath(os.path.join(ROOT, "deps/readies"))
sys.path.insert(0, READIES)
import paella

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


VERBOSE = 0
NOP = False
OPERETO3_URL = "opereto.qa.redislabs.com"
<<<<<<< HEAD
=======
DEFAULT_JSON_VER = '2.0.8'
>>>>>>> a602b16e (QA tests fixes and package with debug info (#2758))


RS_PLATFORMS = {
    'xenial': { 
        'platform':  'Linux-ubuntu16.04',
        'env': 'xenial-amd64-aws' },
    'bionic': {
        'platform': 'Linux-ubuntu18.04',
        'env': 'bionic-amd64-aws' },
    'centos7': {
<<<<<<< HEAD
        'platform': 'Linux-rhel7',
        'env': 'rhel7.7-x86_64-aws' },
    'centos8': {
        'platform': 'Linux-rhel8',
        'env': 'rhel8-x86_64-aws' }
    'ol8': {
        'platform': 'Linux-rhel8',
        'env': 'rhel8-x86_64-aws' }
=======
        'os': 'Linux-rhel7',
        'env': 'rhel7.7-x86_64-aws' },
    'centos8': {
        'os': 'Linux-rhel8',
        'env': 'rhel8.5-x86_64-aws',
        'run': False },
    'rocky8': {
        'os': 'Linux-rhel8',
        'env': 'rhel8.5-x86_64-aws' }
>>>>>>> a602b16e (QA tests fixes and package with debug info (#2758))
}

RLEC_VER_ENVS = {
    '6.0.8': ['xenial', 'bionic', 'centos7'],
    '6.0.12': ['xenial', 'bionic', 'centos7'],
    '6.0.20': ['xenial', 'bionic', 'centos7'],
    '6.2.4': ['xenial', 'bionic', 'centos7'],
    '6.2.8': ['xenial', 'bionic', 'centos7', 'rocky8'],
    '6.2.10': ['xenial', 'bionic', 'centos7', 'rocky8'],
    '6.2.12': ['xenial', 'bionic', 'centos7', 'rocky8'],
    '100.0.0': ['xenial', 'bionic', 'centos7', 'rocky8']
}

class Command1(click.Command):
    def header(self):
        return r'''
                      █████                      █████           
                     ░░███                      ░░███            
  ████████  ██████   ███████    ██████   █████  ███████    █████ 
 ███░░███  ░░░░░███ ░░░███░    ███░░███ ███░░  ░░░███░    ███░░  
░███ ░███   ███████   ░███    ░███████ ░░█████   ░███    ░░█████ 
░███ ░███  ███░░███   ░███ ███░███░░░   ░░░░███  ░███ ███ ░░░░███
░░███████ ░░████████  ░░█████ ░░██████  ██████   ░░█████  ██████ 
 ░░░░░███  ░░░░░░░░    ░░░░░   ░░░░░░  ░░░░░░     ░░░░░  ░░░░░░  
     ░███                                                        
     █████                                                       
    ░░░░░                                                        

'''

    def footer(self):
        return '''

Other configuration:
RS_VERSIONS file includes Redis Enterprive versions for release tests.

'''

    def get_help(self, ctx):
        h = super().get_help(ctx)
        return self.header() + h + self.footer()


class Test:
    def __init__(self, token, test_fname, modver, snapshot, rsver, osnick, light):
        global NOP, VERBOSE

        self.token = token
        self.test_fname = test_fname
        modver = re.sub(r'^v(.*)', r'\1', modver)
        self.modver = modver
        self.snapshot = snapshot
<<<<<<< HEAD
        self.rsver = rsver
        self.osnick = osnick
        self.light = light
=======
        self.jsonver = jsonver
        self.rlecver = rlecver
        self.rlecver_base = re.sub(r'^([^-]*)-.*', r'\1', rlecver)
        self.osnick = osnick
        self.light = light
        self.vecsim = vecsim
        self.module_name = "RediSearchLight" if self.light else "RediSearch"

        ENV['SEARCH_VERSION'] = modver
        os.environ['SEARCH_DIR'] = 'redisearch'

        if not light:
            ENV['SEARCH_FILE_PREFIX'] = 'redisearch'
            ENV['SEARCH_DOWNLOAD_NAME'] = 'search'
            ENV['SEARCH_TEST_NAME'] = 'RediSearchEnterprise'
        else:
            ENV['SEARCH_FILE_PREFIX'] = 'redisearch-light'
            ENV['SEARCH_DOWNLOAD_NAME'] = 'searchlight'
            ENV['SEARCH_TEST_NAME'] = 'RedisearchLight'
>>>>>>> a602b16e (QA tests fixes and package with debug info (#2758))

        os.environ['RS_MODULE_DIR'] = 'redisearch'
        if light:
            self.rsmod = 'RedisearchLight'
            ENV['RS_MODULE_FILE_PREFIX'] = 'redisearch-light'
        else:
            self.rsmod = 'RediSearchEnterprise'
            ENV['RS_MODULE_FILE_PREFIX'] = 'redisearch'
        if snapshot:
            ENV['RS_MODULE_FILE_PREFIX'] = "snapshots/" + ENV['RS_MODULE_FILE_PREFIX']

        ENV['RS_MODULE'] = self.rsmod
        ENV['MODULE_VERSION'] = modver
        ENV['RS_VERSION'] = rsver

<<<<<<< HEAD
        self.xtx_vars = ['RS_MODULE', 'RS_MODULE_DIR', 'RS_MODULE_FILE_PREFIX',
                         'RS_VERSION', 'RS_ENV', 'RS_MODULE_OS',
                         'MODULE_VERSION']
=======
        ENV['SEARCH_VECSIM'] = 'true' if vecsim else 'false'

        self.xtx_vars = ['SEARCH_VERSION', 'SEARCH_DIR', 'SEARCH_FILE_PREFIX',
                         'SEARCH_TEST_NAME', 'SEARCH_DOWNLOAD_NAME', 'SEARCH_VECSIM',
                         'RLEC_VERSION', 'RLEC_ENVS', 'RLEC_ARCH',
                         'REJSON_VERSION', 'REJSON_DIR', 'REJSON_FILE_PREFIX']
>>>>>>> a602b16e (QA tests fixes and package with debug info (#2758))

    def run(self):
        if VERBOSE:
            click.echo(f"{self.module_name}/{self.modver} for RS {self.rlecver}:")
        rlec_envs = ""
        if self.rlecver_base in RLEC_VER_ENVS:
            envs = RLEC_VER_ENVS[self.rlecver_base]
        else:
            envs = RLEC_PLATFORMS.keys()
        found_osnick = False
<<<<<<< HEAD
        for osnick in RS_PLATFORMS.keys():
            if self.osnick is None or osnick == self.osnick:
                found_osnick = True
                rs_platform = RS_PLATFORMS[osnick]['platform']
                rs_env = RS_PLATFORMS[osnick]['env']
                self.run_for_os(rs_platform, rs_env)
        if not found_osnick:
            click.echo(f"osnick {self.osnick}: not found")
=======
        for osnick in envs:
            if self.osnick is None:
                if 'run' in RLEC_PLATFORMS[osnick] and RLEC_PLATFORMS[osnick]['run'] is False:
                    continue
            if self.osnick is None or osnick == self.osnick:
                found_osnick = True
                rlec_env = RLEC_PLATFORMS[osnick]['env']
                env_spec = """
                    {{
                      "teardown": true,
                      "name": "{rlec_env}",
                      "concurrency": 1
                    }}
                    """.format(rlec_env=rlec_env)
                rlec_envs +=  (",\n" if rlec_envs != "" else "") + env_spec
        if not found_osnick:
            ret = f"error: osnick {osnick}: not found"
        else:
            ret = self.run_envs(rlec_envs)
        click.echo(f"{self.module_name}/{self.modver} for RS {self.rlecver}: {ret}")

    def run_envs(self, rlec_envs):
        ENV['RLEC_ENVS'] = rlec_envs
>>>>>>> a602b16e (QA tests fixes and package with debug info (#2758))

    def run_for_os(self, rs_mod_os, rs_env):
        ENV['RS_ENV'] = rs_env
        ENV['RS_MODULE_OS'] = rs_mod_os
        
        desc = f"{self.rsmod}/{self.modver}/{rs_mod_os} for RS {self.rsver}"
        click.echo(f"Testing {desc}")
        
        global NOP, VERBOSE
        var_args = ' '.join(map(lambda v: f"-e {v}", self.xtx_vars))
        
        try:
            if VERBOSE > 1:
                print(f'{READIES}/bin/xtx {var_args} {self.test_fname}')

            rest = sh(f'{READIES}/bin/xtx --strict {var_args} {self.test_fname}')
        except Exception as x:
            fatal(x)

        try:
            rest_json = json.loads(rest)
            if VERBOSE > 0:
                print(json.dumps(rest_json, indent=2))
        except Exception as x:
            print(rest)
            fatal(x)

        if NOP:
<<<<<<< HEAD
            return 0
=======
            return f"https://{OPERETO3_URL}/ui#dashboard/flow/..."
>>>>>>> a602b16e (QA tests fixes and package with debug info (#2758))

        BB()
        res = requests.post(f"https://{OPERETO3_URL}/processes", verify=False,
                            headers={'Authorization': f'Bearer {self.token}',
                                     'Content-Type': 'application/json'},
                            data=rest)
        if not res.ok:
<<<<<<< HEAD
            click.echo(f"Failed to run tests on {desc}: {res.reason} [{res.status_code}]")
            return 1
        j = json.loads(res.content)
        if j['status'] != 'success':
            err = j['text']
            click.echo(f"Failed to run tests on {desc}: {err}")
            return 1

        self.id = j['data'][0]
        # click.echo(f"Tests running on {desc}")
        click.echo(f"Results: https://{OPERETO3_URL}/ui#dashboard/flow/{self.id}")
        return 0
=======
            return f"error: {res.reason} [{res.status_code}]"

        j = json.loads(res.content)
        if j['status'] != 'success':
            err = j['text']
            return f"error: {err}"

        self.id = j['data'][0]
        return f"https://{OPERETO3_URL}/ui#dashboard/flow/{self.id}"
>>>>>>> a602b16e (QA tests fixes and package with debug info (#2758))


@click.command(help='Invoke QA Automation tests', cls=Command1)
@click.option('--token', default=None, help='QA automation (Opereto) token (also: QA_AUTOMATION_TOKEN env var)')
@click.option('--test', '-t', default='release', help='Name of .json parameters file')
@click.option('--modver', '-m', default='master', help='Module version to test. Default: master')
@click.option('--snapshot', '-s', is_flag=True, default=False, help='Test a snapshoy module version')
@click.option('--rsver', default=None, help='Test for a RS version`')
@click.option('--osnick', default=None, help='Test for OSNICK`')
@click.option('--light', is_flag=True, default=False, help='Test RediSearch Light')
@click.option('--quick', is_flag=True, default=False, help='Only test one RS version')
@click.option('--nop', is_flag=True, default=False, help='Dry run')
@click.option('--verbose', '-v', is_flag=True, default=False, help='Be verbose')
@click.option('--verbosity', type=int, default=0, help='Verbosity level')
def main(token, test, modver, snapshot, rsver, osnick, light, quick, nop, verbose, verbosity, *args, **kwargs):
    BB()
    global NOP, VERBOSE
    VERBOSE = 1 if verbose else verbosity
    NOP = nop

    if token is None:
        token = os.getenv('QA_AUTOMATION_TOKEN')
    if token is None and not nop:
        raise click.ClickException('QA automation token is missing.')
    test_fname = os.path.join(HERE, f'{test}.json')
    if not os.path.exists(test_fname):
        raise click.ClickException(f"Invalid test name: {test}")

    if rsver is not None:
        Test(token, test_fname, modver, snapshot, rsver, osnick, light).run()
    else:
        rs_versions = paella.flines(os.path.join(HERE, 'RS_VERSIONS'))
        if quick:
            rs_versions = [rs_versions[0]]
        for rsver in rs_versions:
            Test(token, test_fname, modver, snapshot, rsver, osnick, light).run()


if __name__ == '__main__':
    main()
